// DEFINE_UI_PARAMS([variable name], [label], DCTLUI_VALUE_BOX, [default value])
// DEFINE_UI_PARAMS([variable name], [label], DCTLUI_SLIDER_FLOAT, [default value], [min value], [max value], [step])


//Log control

DEFINE_UI_PARAMS(Dmin_pixel_value, Dmin point, DCTLUI_SLIDER_FLOAT, 0.9, 0.1, 1.0, 0.001) // pixel value where the minimum of three chnnal's density yields, theoretically should be R Dmin 

DEFINE_UI_PARAMS(D_to_Cineon, D Range, DCTLUI_SLIDER_FLOAT, 2, 0.1, 4, 0.001) // pixel value where the minimum of three chnnal's density yields, theoretically should be R Dmin 

//Red channel
DEFINE_UI_PARAMS(R_Dm, R Dmin offset, DCTLUI_SLIDER_FLOAT, 0, -1.0, 1.0, 0.001) // real R Dmin offset
DEFINE_UI_PARAMS(R_gain, R gain, DCTLUI_SLIDER_FLOAT, 1, 0.1, 3, 0.001) // R Density range adjust

//Green channel
DEFINE_UI_PARAMS(G_Dm, G Dmin offset, DCTLUI_SLIDER_FLOAT, 0, -1.0, 2.0, 0.001) // G Dmin above R Dmin
DEFINE_UI_PARAMS(G_gain, G gain, DCTLUI_SLIDER_FLOAT, 1, 0.1, 3, 0.001)

//Blue channel
DEFINE_UI_PARAMS(B_Dm, B Dmin offset, DCTLUI_SLIDER_FLOAT, 0, -1.0, 2.0, 0.001)
DEFINE_UI_PARAMS(B_gain, B gain, DCTLUI_SLIDER_FLOAT, 1, 0.1, 3, 0.001)


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{   
    float R_Dm_pixel_value =  Dmin_pixel_value * _powf(10, -1.0f * R_Dm);
    float G_Dm_pixel_value =  Dmin_pixel_value * _powf(10, -1.0f * G_Dm);
    float B_Dm_pixel_value =  Dmin_pixel_value * _powf(10, -1.0f * B_Dm);

    float D_R = -1.0f * _log10f(p_R/R_Dm_pixel_value) * R_gain;
    float D_G = -1.0f * _log10f(p_G/G_Dm_pixel_value) * G_gain;
    float D_B = -1.0f * _log10f(p_R/B_Dm_pixel_value) * B_gain;

    float r2 = D_R / D_to_Cineon;
    float g2 = D_G / D_to_Cineon;
    float b2 = D_B / D_to_Cineon;

    return make_float3(r2, g2, b2);
}